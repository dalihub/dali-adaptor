#ifndef DALI_TEXT_ABSTRACTION_DEFINITIONS_H
#define DALI_TEXT_ABSTRACTION_DEFINITIONS_H

/*
 * Copyright (c) 2019 Samsung Electronics Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// EXTERNAL INCLUDES
#include <stdint.h>

namespace Dali
{

namespace TextAbstraction
{

typedef uint32_t FontId;             ///< The unique identifier for a font face (generated by FontClient)
typedef uint32_t PointSize26Dot6;    ///< The point size in 26.6 fractional points
typedef uint32_t FaceIndex;          ///< Used with fonts which allow several font faces
typedef uint32_t GlyphIndex;         ///< Uniquely identifies a glyph within a particular font
typedef uint32_t Character;          ///< A UTF-32 representation of a character
typedef uint32_t CharacterIndex;     ///< An index into an array of characters
typedef uint32_t Length;             ///< The length of an array
typedef uint32_t BidiInfoIndex;      ///< Index to the bidirectional info for a paragraph.
typedef char     LineBreakInfo;      ///< Line break info (must break, allow break, no break).
typedef char     WordBreakInfo;      ///< Word break info (break, no break).
typedef bool     CharacterDirection; ///< The character's direction: @e false is left to right, @e true is right to left.
typedef uint32_t ColorIndex;         ///< An index into an array of colors.

/**
 * @brief Enumerates the possible line break info values.
 */
enum
{
  LINE_MUST_BREAK  = 0u, ///< Text must be broken into a new line.
  LINE_ALLOW_BREAK = 1u, ///< Is possible to break the text into a new line.
  LINE_NO_BREAK    = 2u  ///< Text can't be broken into a new line.
};

/**
 * @brief Enumerates the possible word break info values.
 */
enum
{
  WORD_BREAK    = 0u, ///< Text can be broken into a new word.
  WORD_NO_BREAK = 1u, ///< Text can't be broken into a new word.
};

enum GlyphType
{
  BITMAP_GLYPH, ///< Glyph stored as pixels.
  VECTOR_GLYPH  ///< Glyph stored as vectors (scalable). This feature requires highp shader support and is not available on all platforms.
};

struct VectorBlob
{
  unsigned char r;
  unsigned char g;
  unsigned char b;
  unsigned char a;
};

/**
* @brief Defines how a color is blended.
*/
enum class ColorBlendingMode
{
  NONE,     ///< No blend.
  MULTIPLY  ///< The color is multiplied by another one.
};

} // namespace TextAbstraction

} // namespace Dali

#endif // DALI_TEXT_ABSTRACTION_DEFINITIONS_H
